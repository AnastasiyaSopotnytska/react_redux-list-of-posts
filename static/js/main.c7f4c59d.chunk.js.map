{"version":3,"sources":["helpers/api.ts","store/index.ts","store/selectors.ts","components/PostsList/PostsList.tsx","helpers/post.ts","helpers/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","helpers/user.ts","index.tsx"],"names":["BASE_URL","getUsersAction","createAction","getPostsAction","getCommentsAction","addCommentAction","reducer","createReducer","posts","users","comments","builder","addCase","state","action","payload","push","store","configureStore","setUserSelector","setPostsSelector","setCommentsSelector","PostsList","userSelect","setPostId","dispatch","useDispatch","useSelector","useState","selectedPostId","setSelectedPostId","useEffect","userId","fetch","then","response","json","post","className","map","title","type","onClick","id","getPostComments","postId","NewCommentForm","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","comment","newComment","createdAt","Date","updatedAt","method","headers","JSON","stringify","com","placeholder","value","onChange","target","PostDetails","isShowComments","setIsShowComments","setPost","commentsFromServer","getPostDetails","toString","postFromServer","handlerDelete","commentId","deleteComment","length","App","setUserSelect","usersFromServer","user","Root","ReactDOM","render","document","getElementById"],"mappings":"iRAAaA,G,MAAW,qC,OCOXC,EAAiBC,YAAqB,aACtCC,EAAiBD,YAAqB,YAEtCE,EAAoBF,YAAkB,gBACtCG,EAAmBH,YAAkB,eAQ5CI,EAAUC,YANY,CAC1BC,MAAO,GACPC,MAAO,GACPC,SAAU,KAGgC,SAACC,GAC3CA,EACGC,QAAQX,GAAgB,SAACY,EAAOC,GAE/BD,EAAMJ,MAAQK,EAAOC,WAEtBH,QAAQT,GAAgB,SAACU,EAAOC,GAE/BD,EAAML,MAAQM,EAAOC,WAGtBH,QAAQR,GAAmB,SAACS,EAAOC,GAElCD,EAAMH,SAAWI,EAAOC,WAEzBH,QAAQP,GAAkB,SAACQ,EAAOC,GAEjCD,EAAMH,SAASM,KAAKF,EAAOC,eAIpBE,EAAQC,YAAe,CAClCZ,YCvCWa,EAAkB,SAACN,GAAD,OAAkBA,EAAMJ,OAC1CW,EAAmB,SAACP,GAAD,OAAkBA,EAAML,OAC3Ca,EAAsB,SAACR,GAAD,OAAkBA,EAAMH,U,eCQ9CY,EAA6B,SAAC,GAGpC,IAFLC,EAEI,EAFJA,WACAC,EACI,EADJA,UAEMC,EAAWC,cACXlB,EAAQmB,YAAYP,GAE1B,EAA4CQ,mBAAiB,GAA7D,mBAAOC,EAAP,KAAuBC,EAAvB,KAOA,OALAC,qBAAU,WCnBgB,IAACC,KDoBZT,ECnBA,MAAXS,EACKC,MAAM,GAAD,OAAIjC,EAAJ,WACTkC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGxBH,MAAM,GAAD,OAAIjC,EAAJ,yBAA6BgC,IACtCE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WDcxBF,MAAK,SAAAG,GAAI,OAAIZ,EAAStB,EAAekC,SACvC,CAACd,IAGF,sBAAKe,UAAU,YAAf,UACE,wCACA,oBAAIA,UAAU,kBAAd,SACG9B,EAAM+B,KAAI,SAAAF,GAAI,OACb,qBACEC,UAAU,kBAEV,UAAQ,cAHV,UAKE,gCACE,6CAAcD,EAAKL,OAAnB,SACCK,EAAKG,SAER,wBACEC,KAAK,SACLH,UAAU,2BACVI,QAAS,WACHL,EAAKM,KAAOd,GACdC,EAAkB,GAClBN,EAAU,KAEVM,EAAkBO,EAAKM,IACvBnB,EAAUa,EAAKM,MATrB,SAaGN,EAAKM,KAAOd,EAAiB,QAAU,WApBrCQ,EAAKM,aE9BTC,EAAkB,SAACC,GAC9B,OAAOZ,MAAM,GAAD,OAAIjC,EAAJ,4BAAgC6C,IACzCX,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCKlBU,G,MAAkC,SAAC,GAAgB,IAAdD,EAAa,EAAbA,OAChD,EAAwBjB,mBAAS,IAAjC,mBAAOmB,EAAP,KAAaC,EAAb,KACA,EAA0BpB,mBAAS,IAAnC,mBAAOqB,EAAP,KAAcC,EAAd,KACA,EAAwBtB,mBAAS,IAAjC,mBAAOuB,EAAP,KAAaC,EAAb,KACM3B,EAAWC,cAwBjB,OACE,uBACEY,UAAU,iBACVe,SAzBiB,SAACC,GACpBA,EAAMC,iBAEN,IDLuBC,ECKjBC,EAAa,CACjBd,GAAIE,EAAS,IACbA,SACAE,OACAE,QACAE,OACAO,UAAWC,OACXC,UAAWD,SDZUH,ECeZC,EDdNxB,MAAM,GAAD,OAAIjC,EAAJ,aAAyB,CACnC6D,OAAQ,OACRC,QAAS,CAAE,eAAgB,mCAC3BX,KAAMY,KAAKC,UAAU,CAAER,cAEtBtB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCUxBF,MAAK,kBAAMU,EAAgBC,GACzBX,MAAK,SAAA+B,GAAG,OAAIxC,EAASpB,EAAiB4D,UAE3CjB,EAAQ,IACRE,EAAS,IACTE,EAAQ,KAIR,UAIE,qBAAKd,UAAU,aAAf,SACE,uBACEG,KAAK,OACLM,KAAK,OACLmB,YAAY,YACZ5B,UAAU,wBACV6B,MAAOpB,EACPqB,SAAU,SAACd,GACTN,EAAQM,EAAMe,OAAOF,YAK3B,qBAAK7B,UAAU,aAAf,SACE,uBACEG,KAAK,QACLM,KAAK,QACLmB,YAAY,aACZ5B,UAAU,wBACV6B,MAAOlB,EACPmB,SAAU,SAACd,GACTJ,EAASI,EAAMe,OAAOF,YAK5B,qBAAK7B,UAAU,aAAf,SACE,0BACES,KAAK,OACLmB,YAAY,oBACZ5B,UAAU,wBACV6B,MAAOhB,EACPiB,SAAU,SAACd,GACTF,EAAQE,EAAMe,OAAOF,YAK3B,wBACE1B,KAAK,SACLH,UAAU,uCAFZ,gCCnEOgC,G,MAA+B,SAAC,GAAgB,IAAdzB,EAAa,EAAbA,OACvCpB,EAAWC,cACXhB,EAAWiB,YAAYN,GAE7B,EAA4CO,oBAAS,GAArD,mBAAO2C,EAAP,KAAuBC,EAAvB,KACA,EAAwB5C,mBAAsB,MAA9C,mBAAOS,EAAP,KAAaoC,EAAb,KAEA1C,qBAAU,WACRa,EAAgBC,GACbX,MAAK,SAAAwC,GACJjD,EAASrB,EAAkBsE,OHZL,SAAC7B,GAC7B,OAAOZ,MAAM,GAAD,OAAIjC,EAAJ,mBAAuB6C,IAChCX,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UGa3BuC,CAAe9B,EAAO+B,YACnB1C,MAAK,SAAA2C,GAAc,OAAIJ,EAAQI,QACjC,CAAChC,IAEJ,IAAMiC,EAAgB,SAACC,IFvBI,SAACA,GACrB9C,MAAM,GAAD,OAAIjC,EAAJ,qBAAyB+E,GAAa,CAChDlB,OAAQ,WEsBRmB,CAAcD,GAEdnC,EAAgBC,GACbX,MAAK,SAAAwC,GACJjD,EAASrB,EAAkBsE,QAIjC,OACE,sBAAKpC,UAAU,cAAf,UACE,+CAEA,yBAASA,UAAU,oBAAnB,SACE,mCAAID,QAAJ,IAAIA,OAAJ,EAAIA,EAAMG,UAGZ,0BAASF,UAAU,wBAAnB,UACE,wBACEG,KAAK,SACLH,UAAU,SACVI,QAAS,kBAAM8B,GAAmBD,IAHpC,SAKIA,EAAD,gBAEY7D,EAASuE,OAFrB,4BACWvE,EAASuE,OADpB,gBAKDV,GACA,oBAAIjC,UAAU,oBAAd,SACG5B,EAAS6B,KAAI,SAAAiB,GAAO,OACnB,qBACElB,UAAU,yBADZ,UAIE,wBACEG,KAAK,SACLH,UAAU,oCACVI,QAAS,kBAAMoC,EAActB,EAAQb,KAHvC,eAOA,4BAAIa,EAAQL,SATPK,EAAQb,YAgBvB,kCACE,qBAAKL,UAAU,4BAAf,SACGD,GACC,cAAC,EAAD,CAAgBQ,OAAM,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAMM,cCrB3BuC,EArDO,WACpB,IAAMzD,EAAWC,cACXjB,EAAQkB,YAAYR,GAE1B,EAAoCS,mBAAS,KAA7C,mBAAOL,EAAP,KAAmB4D,EAAnB,KACA,EAA4BvD,mBAAS,GAArC,mBAAOiB,EAAP,KAAerB,EAAf,KAOA,OALAO,qBAAU,WCZHE,MAAM,GAAD,OAAIjC,EAAJ,WACTkC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDaxBF,MAAK,SAAAkD,GAAe,OAAI3D,EAASxB,EAAemF,SAClD,IAGD,sBAAK9C,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wDAGE,yBACEA,UAAU,qBACV6B,MAAO5C,EACP6C,SAAU,SAACd,GAAD,OAAW6B,EAAc7B,EAAMe,OAAOF,QAHlD,UAKE,wBAAQA,MAAM,IAAd,uBACC1D,EAAM8B,KAAI,SAAA8C,GAAI,OACb,wBAAQlB,MAAOkB,EAAK1C,GAApB,SAAuC0C,EAAKtC,MAAfsC,EAAK1C,eAM1C,uBAAML,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEf,WAAYA,EACZC,UAAWA,MAIf,qBAAKc,UAAU,eAAf,SACc,IAAXO,EAEG,cAAC,EAAD,CAAaA,OAAQA,IAGrB,0DEhDRyC,EAAO,kBACX,cAAC,IAAD,CAAUrE,MAAOA,EAAjB,SACE,cAAC,EAAD,OAIJsE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.c7f4c59d.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import {\n  configureStore, createAction, createReducer,\n} from '@reduxjs/toolkit';\nimport {\n  Post, State, User,\n} from '../react-app-env';\n\nexport const getUsersAction = createAction<User[]>('SET_USERS');\nexport const getPostsAction = createAction<Post[]>('SET_POST');\n// eslint-disable-next-line max-len\nexport const getCommentsAction = createAction<any>('SET_COMMENTS');\nexport const addCommentAction = createAction<any>('ADD_COMMENT');\n\nconst initialState: State = {\n  posts: [],\n  users: [],\n  comments: [],\n};\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder\n    .addCase(getUsersAction, (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.users = action.payload;\n    })\n    .addCase(getPostsAction, (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.posts = action.payload;\n    })\n    // eslint-disable-next-line max-len\n    .addCase(getCommentsAction, (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.comments = action.payload;\n    })\n    .addCase(addCommentAction, (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.comments.push(action.payload);\n    });\n});\n\nexport const store = configureStore({\n  reducer,\n});\n","import { State } from '../react-app-env';\n\nexport const setUserSelector = (state: State) => state.users;\nexport const setPostsSelector = (state: State) => state.posts;\nexport const setCommentsSelector = (state: State) => state.comments;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserPosts } from '../../helpers/post';\nimport { getPostsAction } from '../../store';\nimport { setPostsSelector } from '../../store/selectors';\nimport './PostsList.scss';\n\ntype Props = {\n  userSelect: string;\n  setPostId: (id: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userSelect,\n  setPostId,\n}) => {\n  const dispatch = useDispatch();\n  const posts = useSelector(setPostsSelector);\n\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n\n  useEffect(() => {\n    getUserPosts(userSelect)\n      .then(post => dispatch(getPostsAction(post)));\n  }, [userSelect]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n            data-cy=\"postDetails\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                if (post.id === selectedPostId) {\n                  setSelectedPostId(0);\n                  setPostId(0);\n                } else {\n                  setSelectedPostId(post.id);\n                  setPostId(post.id);\n                }\n              }}\n            >\n              {post.id === selectedPostId ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = (userId: string) => {\n  if (userId === '0') {\n    return fetch(`${BASE_URL}/posts`)\n      .then(response => response.json());\n  }\n\n  return fetch(`${BASE_URL}/posts?userId=${userId}`)\n    .then(response => response.json());\n};\n\nexport const getPostDetails = (postId: string) => {\n  return fetch(`${BASE_URL}/posts/:${postId}`)\n    .then(response => response.json());\n};\n","import { NewComment } from '../react-app-env';\nimport { BASE_URL } from './api';\n\nexport const getPostComments = (postId: number) => {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(response => response.json());\n};\n\nexport const deleteComment = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addComment = (comment: NewComment) => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    body: JSON.stringify({ comment }),\n  })\n    .then(response => response.json());\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addComment, getPostComments } from '../../helpers/comments';\nimport { addCommentAction } from '../../store';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const dispatch = useDispatch();\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment = {\n      id: postId + 1000,\n      postId,\n      name,\n      email,\n      body,\n      createdAt: Date(),\n      updatedAt: Date(),\n    };\n\n    addComment(newComment)\n      .then(() => getPostComments(postId)\n        .then(com => dispatch(addCommentAction(com))));\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteComment, getPostComments } from '../../helpers/comments';\nimport { getPostDetails } from '../../helpers/post';\nimport { Post } from '../../react-app-env';\nimport { getCommentsAction } from '../../store';\nimport { setCommentsSelector } from '../../store/selectors';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const dispatch = useDispatch();\n  const comments = useSelector(setCommentsSelector);\n\n  const [isShowComments, setIsShowComments] = useState(false);\n  const [post, setPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    getPostComments(postId)\n      .then(commentsFromServer => {\n        dispatch(getCommentsAction(commentsFromServer));\n      });\n\n    getPostDetails(postId.toString())\n      .then(postFromServer => setPost(postFromServer));\n  }, [postId]);\n\n  const handlerDelete = (commentId: number) => {\n    deleteComment(commentId);\n\n    getPostComments(postId)\n      .then(commentsFromServer => {\n        dispatch(getCommentsAction(commentsFromServer));\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setIsShowComments(!isShowComments)}\n        >\n          {!isShowComments\n            ? `Hide ${comments.length} comments`\n            : `Shown ${comments.length} comments`}\n        </button>\n\n        {!isShowComments && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => handlerDelete(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          {post && (\n            <NewCommentForm postId={post?.id} />\n          )}\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './helpers/user';\nimport { setUserSelector } from './store/selectors';\nimport { getUsersAction } from './store';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const users = useSelector(setUserSelector);\n\n  const [userSelect, setUserSelect] = useState('0');\n  const [postId, setPostId] = useState(0);\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => dispatch(getUsersAction(usersFromServer)));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userSelect}\n            onChange={(event) => setUserSelect(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userSelect={userSelect}\n            setPostId={setPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {postId !== 0\n            ? (\n              <PostDetails postId={postId} />\n            )\n            : (\n              <p>No selected post</p>\n            )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { User } from '../react-app-env';\nimport { BASE_URL } from './api';\n\nexport const getUsers = (): Promise<User[]> => {\n  return fetch(`${BASE_URL}/users`)\n    .then(response => response.json());\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { store } from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}